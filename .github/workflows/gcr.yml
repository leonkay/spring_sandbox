name: Publish to GCR and Deploy to Cloud Run
# create simple trigger based on everytime we make change to this repository
on:
  push:
    branches: ["main"]
env:
  IMAGE_NAME: ${{ github.repository }}
  PROJECT_ID: ${{ secrets.GCP_PROJECT }} #create env called PROJECT_ID consisted of our actual GCP Project ID
  REPOSITORY: docker-registry
  BASEREGISTRY: us-east1-docker.pkg.dev
  SERVICE_NAME: spring-sandbox
#define jobs
jobs:
  Deploy:
    runs-on: ubuntu-latest #run this workflow on ubuntu instance
    permissions: #make sure we add permission to read and write package
      contents: read
      packages: write
      id-token: "write"
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4 #checkouts your repo, so this workflow can access it
      - name: Google Auth
        id: auth
        uses: "google-github-actions/auth@v2"
        with:
          credentials_json: "${{ secrets.GCP_SA_KEY }}"
      - name: Login to GCR
        uses: google-github-actions/setup-gcloud@v0.3.0 #checkouts GCR repo, so this workflow can access it
        with:
          service_account_key: ${{ secrets.GOOGLE_SECRET }} #parse the value of repository secret called SERVICE_ACCOUNT_KEY that we have created earlier
          project_id: ${{ env.PROJECT_ID }} #parse the value of env called PROJECT_ID
          export_default_credentials: true

      - name: Build Docker Image
        run: docker build -t $IMAGE_NAME:latest . #build the docker image

      - name: Configure Docker Client
        run: |-
          gcloud auth configure-docker --quiet $BASEREGISTRY #authenticate to gcr

      - name: Push Docker Image to Container Registry GCR
        #tag docker image to gcr image format then push to gcr
        run: |-
          docker tag $IMAGE_NAME:latest $BASEREGISTRY/$PROJECT_ID/$REPOSITORY/$IMAGE_NAME:latest
          docker push $BASEREGISTRY/$PROJECT_ID/$REPOSITORY/$IMAGE_NAME:latest
      - name: Deploy to Cloud Run
        id: "deploy"
        uses: "google-github-actions/deploy-cloudrun@v2"
        with:
          service: spring-sandbox
          image: ${{ env.BASEREGISTRY }}/${{ env.PROJECT_ID }}/${{ env.REPOSITORY }}/${{ env.IMAGE_NAME }}:latest

      - name: "Use output"
        run: 'curl -H "Authorization: Bearer $(gcloud auth print-identity-token)" "${{ steps.deploy.outputs.url }}"'
